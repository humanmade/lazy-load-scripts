"use strict";window.addEventListener("load",(()=>{if(!Array.isArray(lazyLoadScriptsEntries)||!lazyLoadScriptsEntries.length)return;const t=(t,e="",n=!1)=>{const o=document.createElement("script");if(o.src=t,n&&(o.async=!0),e){const t=new CustomEvent(e+"-loaded"),n=()=>{window.dispatchEvent(t)};o.id=e,o.onload=n}document.body.appendChild(o)},e=void 0!==window.IntersectionObserverEntry?e=>{const{element_selectors:n,offset:o="0px",script_id:r,script_src:s,script_async:c=!1}=e,i=n.split(",").map((t=>t.trim())),d=document.querySelectorAll(i);if(!d||!d.length)return;const a=new IntersectionObserver((e=>{e.some((t=>t.isIntersecting))&&(t(s,r,c),a.disconnect())}),{rootMargin:`0px 0px ${o} 0px`});d.forEach((t=>{a.observe(t)}))}:({script_id:e,script_src:n,script_async:o})=>t(n,e,o);lazyLoadScriptsEntries.forEach(e)})),window.lazyLoadScriptsCallback=new Proxy([],{set(t,e,n){const o=["keydown","mousemove","wheel","touchmove","touchstart","touchend"],r=n[1];t[e]=n;const s=()=>{"function"==typeof r&&r(),o.forEach((function(t){window.removeEventListener(t,s)}))};return o.forEach((function(t){window.addEventListener(t,s,{passive:!0})})),!0}});
